apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer-example
  namespace: default
  labels:
    app: pgbouncer-example
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0  # Avoid Terminating and ContainerCreating at the same time
  selector:
    matchLabels:
      app: pgbouncer-example
  template:
    metadata:
      labels:
        app: pgbouncer-example
    spec:
      terminationGracePeriodSeconds: 150 # wait for all db client timeouts
      nodeSelector:
        purpose: apps
      containers:
        - name: pgbouncer
          image: edoburu/pgbouncer:1.8.1
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
               name: pgbouncer-example-env
          env:
            - name: POOL_MODE
              value: session
            - name: SERVER_RESET_QUERY
              value: DISCARD ALL
          livenessProbe:
            tcpSocket:
              port: 5432
            periodSeconds: 60
          lifecycle:
            preStop:
              exec:
                # https://github.com/kubernetes/contrib/issues/1140
                # This hack avoids 0% downtime during deploys.
                # After the preStop, containers receive a SIGTERM meaning:
                # "cleanup what you're doing and stop accepting new work".
                # Yet traffic may still briefly be sent to it by the ingress
                # controller. This hack delays that SIGTERM moment so the new
                # container is already actively used to handle traffic.
                command: ["sleep", "15"]
          securityContext:
            allowPrivilegeEscalation: false
            #capabilities:
            #  drop: ['all']
